version: '3.4'

services:
  ocelotapigateway:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORT=5000
    ports:
      - "5000:8080"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro

  cartservice.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5001
    ports:
      - "5001:5001"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro

  productservice.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5003
    ports:
      - "5003:5003"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro

  productservice.db:
    container_name: productservice_db
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=productdb
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_productservice_data:/var/lib/postgresql/data2/

  cartservice.db:
    container_name: cartservice_db
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=cartdb
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - postgres_cartservice_data:/var/lib/postgresql/data2/
      
  authservice.db:
    container_name: authservice_db
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=authdb
    restart: always
    ports:
      - "5434:5432"
    volumes:
      - postgres_authservice_data:/var/lib/postgresql/data2/
        
  cartservice.db.mongo:
    container_name: cartservice_db_mongo
    command: [--auth]
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: 123456
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_cartservice_data:/data/db
      - "./mongo-entrypoint/:/docker-entrypoint-initdb.d/"
  
  redis:
    container_name: "redis"
    image: redis:latest
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
      
  rabbitmq:    
    container_name: "rabbitmq"
    ports:
      - '5672:5672' # AMQP
      - '15672:15672' # UI
    restart: always 
        
  elasticsearch:
    container_name: elasticsearch
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - discovery.type=single-node
    restart: always
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    #      - ELASTICSEARCH_USERNAME=elastic
    #      - ELASTICSEARCH_PASSWORD=DkIedPPSCb
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: always
    
  prometheus:
    container_name: prometheus
    networks:
      - microservices-network
    ports:
      - 9090:9090
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      
  grafana:
    container_name: grafana
    networks:
      - microservices-network 
    ports:
      - 3000:3000
    volumes:
      - ./configs/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
#      - ./configs/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
#      - ./configs/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
      
  jaeger:
    container_name: "jaeger"
    ports:
      - "4319:4317" # gRPC
      - "4318:4318" # HTTP
      - "16686:16686" # Web UI
        
  # OpenTelemetry Collector
  otel-collector:
    command: [ "--config=/etc/otel-collector-config.yml" ]
    volumes:
      - ./configs/otel-collector-config.yml:/etc/otel-collector-config.yml
      - ./output:/etc/output:rw # Store the logs
    ports:
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "4317:4317" # OTLP gRPC receiver
    depends_on:
      - jaeger
    networks:
      - microservices-network

#  consul:
#    container_name: "consul"
#    restart: always
#    ports:
#      - '8500:8500'
#    volumes:
#      - consul-data:/consul/data